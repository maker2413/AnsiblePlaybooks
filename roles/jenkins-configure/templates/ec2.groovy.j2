#!groovy
import com.amazonaws.services.ec2.model.InstanceType
import com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.domains.Domain
import hudson.model.*
import hudson.plugins.ec2.AmazonEC2Cloud
import hudson.plugins.ec2.AMITypeData
import hudson.plugins.ec2.EC2Tag
import hudson.plugins.ec2.SlaveTemplate
import hudson.plugins.ec2.SpotConfiguration
import hudson.plugins.ec2.UnixData
import jenkins.model.Jenkins

// parameters
def SlaveTemplateUsEast1Parameters = [
    ami:                      'ami-0498d949ee286578f',
    associatePublicIp:        false,
    connectBySSHProcess:      true,
    connectUsingPublicIp:     false,
    customDeviceMapping:      '',
    deleteRootOnTermination:  true,
    description:              'Jenkins slave EC2 US West 2',
    ebsOptimized:             false,
    iamInstanceProfile:       'arn:aws:iam::574826924367:instance-profile/Profile-LSDS-JenkinsMaster',
    idleTerminationMinutes:   '5',
    initScript:               '',
    instanceCapStr:           '5',
    jvmopts:                  '',
    labelString:              'mock-build docker-build-small docker-build',
    launchTimeoutStr:         '',
    numExecutors:             '1',
    remoteAdmin:              'ec2-user',
    remoteFS:                 '',
    securityGroups:           'sg-0d10c698f4475d184, sg-0e7e5fc0c08587980, sg-0ef8fe4c5f83581d5, sg-07169843fd464cc9f',
    stopOnTerminate:          false,
    subnetId:                 'subnet-08f1118dd59133513',
    tags:                     new EC2Tag('Name', 'jenkins-worker'),
    tmpDir:                   '',
    type:                     't3.medium',
    useDedicatedTenancy:      false,
    useEphemeralDevices:      true,
    usePrivateDnsName:        true,
    userData:                 '',
    zone:                     'us-west-2a'
]

def AmazonEC2CloudParameters = [
    cloudName:      'ec2workers',
    credentialsId:  'jenkins-aws-key',
    instanceCapStr: '2',
    privateKey:     '''{{ jenkins_private_key }}''',
    region: 'us-west-2',
    useInstanceProfileForCredentials: true
]

def AWSCredentialsImplParameters = [
    id:           'jenkins-aws-key',
    description:  'Jenkins AWS IAM key',
    accessKey:    '01234567890123456789',
    secretKey:    '01345645657987987987987987987987987987'
]

// https://github.com/jenkinsci/aws-credentials-plugin/blob/aws-credentials-1.23/src/main/java/com/cloudbees/jenkins/plugins/awscredentials/AWSCredentialsImpl.java
AWSCredentialsImpl aWSCredentialsImpl = new AWSCredentialsImpl(
    CredentialsScope.GLOBAL,
    AWSCredentialsImplParameters.id,
    AWSCredentialsImplParameters.accessKey,
    AWSCredentialsImplParameters.secretKey,
    AWSCredentialsImplParameters.description
)

 SpotConfiguration spotConfig = new SpotConfiguration(".05");

// https://github.com/jenkinsci/ec2-plugin/blob/ec2-1.38/src/main/java/hudson/plugins/ec2/SlaveTemplate.java
SlaveTemplate slaveTemplateUsEast1 = new SlaveTemplate(
    SlaveTemplateUsEast1Parameters.ami,
    SlaveTemplateUsEast1Parameters.zone,
    spotConfig,
    SlaveTemplateUsEast1Parameters.securityGroups,
    SlaveTemplateUsEast1Parameters.remoteFS,
    InstanceType.fromValue(SlaveTemplateUsEast1Parameters.type),
    SlaveTemplateUsEast1Parameters.ebsOptimized,
    SlaveTemplateUsEast1Parameters.labelString,
    Node.Mode.NORMAL,
    SlaveTemplateUsEast1Parameters.description,
    SlaveTemplateUsEast1Parameters.initScript,
    SlaveTemplateUsEast1Parameters.tmpDir,
    SlaveTemplateUsEast1Parameters.userData,
    SlaveTemplateUsEast1Parameters.numExecutors,
    SlaveTemplateUsEast1Parameters.remoteAdmin,
    new UnixData(null, null, null, null),
    SlaveTemplateUsEast1Parameters.jvmopts,
    SlaveTemplateUsEast1Parameters.stopOnTerminate,
    SlaveTemplateUsEast1Parameters.subnetId,
    [SlaveTemplateUsEast1Parameters.tags],
    SlaveTemplateUsEast1Parameters.idleTerminationMinutes,
    SlaveTemplateUsEast1Parameters.usePrivateDnsName,
    SlaveTemplateUsEast1Parameters.instanceCapStr,
    SlaveTemplateUsEast1Parameters.iamInstanceProfile,
    SlaveTemplateUsEast1Parameters.deleteRootOnTermination,
    SlaveTemplateUsEast1Parameters.useEphemeralDevices,
    SlaveTemplateUsEast1Parameters.useDedicatedTenancy,
    SlaveTemplateUsEast1Parameters.launchTimeoutStr,
    SlaveTemplateUsEast1Parameters.associatePublicIp,
    SlaveTemplateUsEast1Parameters.customDeviceMapping,
    SlaveTemplateUsEast1Parameters.connectBySSHProcess,
    SlaveTemplateUsEast1Parameters.connectUsingPublicIp
)

// https://github.com/jenkinsci/ec2-plugin/blob/ec2-1.38/src/main/java/hudson/plugins/ec2/AmazonEC2Cloud.java
AmazonEC2Cloud amazonEC2Cloud = new AmazonEC2Cloud(
    AmazonEC2CloudParameters.cloudName,
    AmazonEC2CloudParameters.useInstanceProfileForCredentials,
    null /* AmazonEC2CloudParameters.credentialsId */,
    AmazonEC2CloudParameters.region,
    AmazonEC2CloudParameters.privateKey,
    AmazonEC2CloudParameters.instanceCapStr,
    [slaveTemplateUsEast1], null, null
)

// get Jenkins instance
Jenkins jenkins = Jenkins.getInstance()

// get credentials domain
def domain = Domain.global()

// get credentials store
def store = jenkins.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

// add credential to store
// We will not be using AWS keys in CHS
//store.addCredentials(domain, aWSCredentialsImpl)

// add cloud configuration to Jenkins
jenkins.clouds.add(amazonEC2Cloud)

// save current Jenkins state to disk
jenkins.save()
