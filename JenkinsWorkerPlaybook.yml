# To run this playbook you need to provide a private key that matches the keypair lsited below

- name: Create a Jenkins Worker AMI
  hosts: localhost
  connection: local
  gather_facts: False

  vars:
    region: us-west-2
    keypair: "jenkinssquids" # pem file name
    instance_type: "{{ my_inst_type | default('t2.micro') }}"
    name_tag: "jenkins-worker-ami-builder"
    proj_tag: "Squids"
    var_type: "{{ my_var_type | default('jenkinsworker') }}"
    ec2build: true
  tasks:
  - name: Add override host
    when: override_host is defined
    add_host:
      hostname: "{{ override_host }}"
      groups: ec2_server
    changed_when: false

  roles:
    - role: 'ec2-create'
      when: ec2build | bool

- name: Configure instance(s)
  hosts: ec2_server
  remote_user: ec2-user
  become: True
  gather_facts: True
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    efsmount: false

  roles:
    - jenkins-worker
    - role: 'efs-mount'
      when: efsmount | bool

- name: Start AMI build process
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    region: us-west-2
    proj_tag: Squids
    ami_name: jenkins-worker

  tasks:
    - debug: var=ec2_provision_result.instances[0]

    - name: Check if AMI with the same name exists
      ec2_ami_facts:
        filters:
          name: "{{ ami_name }}"
      register: myami

    - debug: var=myami

    - name: Deregister AMI if it exists
      ec2_ami:
        delete_snapshot: yes
        image_id: "{{ myami.images[0].image_id }}"
        state: absent
      when: myami.images | length and myami.images[0].state == 'available'

    - name : Create AMI
      ec2_ami:
        instance_id: "{{ ec2_provision_result.instances[0].id }}"
        wait: yes
        delete_snapshot: yes
        name: "{{ ami_name }}"
        region: us-west-2
        tags:
          Name: "{{ ami_name }}"
          Project: "{{ proj_tag }}"

    - name: Terminate instances that were previously launched
      ec2:
        state: 'absent'
        region: "{{ region }}"
        instance_ids: "{{ ec2_provision_result.instances[0].id }}"
