# To run this playbook you need to provide a private key that matches the keypair lsited below
# you also need to provide a vault password file that contains the vault password
# this password can be found in secrets manager if you don't already have it

- name: Create an EC2 Instance With Everything Installed
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    region: us-west-2
    instance_type: "{{ inst_type | default('t2.micro') }}"
    keypair: "{{ key | default('jenkinssquids') }}"
    name_tag: "KitchenSink"
    proj_tag: "Squids"
    var_type: "{{ my_var_type | default('kitchen') }}"
    ec2build: true
  tasks:
  - name: Add override host
    when: override_host is defined
    add_host:
      hostname: "{{ override_host }}"
      groups: ec2_instance
    changed_when: false

  roles:
    - role: 'ec2-create'
      when: ec2build | bool

- name: Configure instance
  hosts: ec2_instance
  remote_user: ec2-user
  become: True
  gather_facts: True
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    var_type: "{{ my_var_type | default('kitchen') }}"
    efsmount: true
    jenkins: true

  roles:
    - epel-ius
    - development-instance
    - ddclient
    - role: 'efs-mount'
      when: efsmount | bool
    - role: 'jenkins-install'
      when: jenkins | bool
      become: yes
    - role: 'jenkins-configure'
      when: jenkins | bool
      become: yes
    - nginx

  tasks:
  - include_vars: users.yml

  - name: Crate /users directory
    file:
      path: /users
      state: directory

  - name: Add users | create users, shell, home dirs
    user:
      name: '{{ item.username }}'
      shell: /bin/bash
      uid: '{{ item.uid }}'
      createhome: yes
      home: "/users/{{ item.username }}"
      comment: 'create with anisble'
      append: yes
    with_items: '{{ users }}'

  - name: Setup | authorized key upload
    authorized_key:
      user: "{{ item.username }}"
      key: "{{ lookup('file', 'pub_keys/{{ item.username }}.pub') }}"
    with_items: '{{ users }}'

  - name: sudoers | update sudoers file and validate
    lineinfile:
      path: /etc/sudoers
      insertafter: EOF
      line: '{{ item.username }} ALL =(ALL) NOPASSWD: ALL'
      regexp: '^{{ item.username }} .*'
      state: present
    when: item.use_sudo
    with_items: '{{ users }}'
